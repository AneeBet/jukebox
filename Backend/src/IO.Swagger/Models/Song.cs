/*
 * Song API
 *
 * API for managing songs
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
 
namespace IO.Swagger.Models
{
    /// <summary>
    /// Represents a song
    /// </summary>
    [DataContract]
    public partial class Song : IEquatable<Song>
    {
        /// <summary>
        /// Gets or Sets _Song
        /// </summary>
 
        [DataMember(Name="song")]
        public string _Song { get; set; }
 
        /// <summary>
        /// Gets or Sets Artist
        /// </summary>
 
        [DataMember(Name="artist")]
        public string Artist { get; set; }
 
        /// <summary>
        /// Gets or Sets Album
        /// </summary>
 
        [DataMember(Name="album")]
        public string Album { get; set; }
 
        /// <summary>
        /// Gets or Sets Playlist
        /// </summary>
 
        [DataMember(Name="playlist")]
        public List<string> Playlist { get; set; }
 
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Song {\n");
            sb.Append("  _Song: ").Append(_Song).Append("\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("  Album: ").Append(Album).Append("\n");
            sb.Append("  Playlist: ").Append(Playlist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
 
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
 
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Song)obj);
        }
 
        /// <summary>
        /// Returns true if Song instances are equal
        /// </summary>
        /// <param name="other">Instance of Song to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Song other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
 
            return
                (
                    _Song == other._Song ||
                    _Song != null &&
                    _Song.Equals(other._Song)
                ) &&
                (
                    Artist == other.Artist ||
                    Artist != null &&
                    Artist.Equals(other.Artist)
                ) &&
                (
                    Album == other.Album ||
                    Album != null &&
                    Album.Equals(other.Album)
                ) &&
                (
                    Playlist == other.Playlist ||
                    Playlist != null &&
                    Playlist.SequenceEqual(other.Playlist)
                );
        }
 
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_Song != null)
                    hashCode = hashCode * 59 + _Song.GetHashCode();
                    if (Artist != null)
                    hashCode = hashCode * 59 + Artist.GetHashCode();
                    if (Album != null)
                    hashCode = hashCode * 59 + Album.GetHashCode();
                    if (Playlist != null)
                    hashCode = hashCode * 59 + Playlist.GetHashCode();
                return hashCode;
            }
        }
 
        #region Operators
        #pragma warning disable 1591
 
        public static bool operator ==(Song left, Song right)
        {
            return Equals(left, right);
        }
 
        public static bool operator !=(Song left, Song right)
        {
            return !Equals(left, right);
        }
 
        #pragma warning restore 1591
        #endregion Operators
    }
}