/*
 * Song, Artist, Album, and Playlist API
 *
 * API to manage songs, artists, albums, and playlists.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Get all playlists by an artist
        /// </summary>
        /// <param name="artistName">Name of the artist</param>
        /// <response code="200">List of playlists</response>
        [HttpGet]
        [Route("/api/artist/{artistName}/playlists")]
        [ValidateModelState]
        [SwaggerOperation("ApiArtistArtistNamePlaylistsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "List of playlists")]
        public virtual IActionResult ApiArtistArtistNamePlaylistsGet([FromRoute][Required]string artistName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
                        : default(List<string>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all songs by an artist
        /// </summary>
        /// <param name="artistName">Name of the artist</param>
        /// <response code="200">List of songs</response>
        [HttpGet]
        [Route("/api/artist/{artistName}/songs")]
        [ValidateModelState]
        [SwaggerOperation("ApiArtistArtistNameSongsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Song>), description: "List of songs")]
        public virtual IActionResult ApiArtistArtistNameSongsGet([FromRoute][Required]string artistName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Song>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"song\" : \"song\",\n  \"playlist\" : [ \"playlist\", \"playlist\" ],\n  \"artist\" : \"artist\",\n  \"album\" : \"album\"\n}, {\n  \"song\" : \"song\",\n  \"playlist\" : [ \"playlist\", \"playlist\" ],\n  \"artist\" : \"artist\",\n  \"album\" : \"album\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Song>>(exampleJson)
                        : default(List<Song>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a new song for an artist
        /// </summary>
        /// <param name="body"></param>
        /// <param name="artistName">Name of the artist</param>
        /// <response code="201">Song added successfully</response>
        [HttpPost]
        [Route("/api/artist/{artistName}/songs")]
        [ValidateModelState]
        [SwaggerOperation("ApiArtistArtistNameSongsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "Song added successfully")]
        public virtual IActionResult ApiArtistArtistNameSongsPost([FromBody]SongInput body, [FromRoute][Required]string artistName)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse201));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"Song added successfully\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse201>(exampleJson)
                        : default(InlineResponse201);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a song by an artist
        /// </summary>
        /// <param name="artistName">Name of the artist</param>
        /// <param name="songName">Name of the song</param>
        /// <response code="200">Song deleted successfully</response>
        [HttpDelete]
        [Route("/api/artist/{artistName}/songs/{songName}")]
        [ValidateModelState]
        [SwaggerOperation("ApiArtistArtistNameSongsSongNameDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Song deleted successfully")]
        public virtual IActionResult ApiArtistArtistNameSongsSongNameDelete([FromRoute][Required]string artistName, [FromRoute][Required]string songName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"Song deleted successfully\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update song details for an artist
        /// </summary>
        /// <param name="body"></param>
        /// <param name="artistName">Name of the artist</param>
        /// <param name="songName">Name of the song</param>
        /// <response code="200">Song details updated successfully</response>
        [HttpPut]
        [Route("/api/artist/{artistName}/songs/{songName}")]
        [ValidateModelState]
        [SwaggerOperation("ApiArtistArtistNameSongsSongNamePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Song details updated successfully")]
        public virtual IActionResult ApiArtistArtistNameSongsSongNamePut([FromBody]SongUpdate body, [FromRoute][Required]string artistName, [FromRoute][Required]string songName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"Song details updated successfully\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all artists in a playlist
        /// </summary>
        /// <param name="playlistName">Name of the playlist</param>
        /// <response code="200">List of artists</response>
        [HttpGet]
        [Route("/api/playlist/{playlistName}/artists")]
        [ValidateModelState]
        [SwaggerOperation("ApiPlaylistPlaylistNameArtistsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "List of artists")]
        public virtual IActionResult ApiPlaylistPlaylistNameArtistsGet([FromRoute][Required]string playlistName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
                        : default(List<string>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all songs in a playlist
        /// </summary>
        /// <param name="playlistName">Name of the playlist</param>
        /// <response code="200">List of songs</response>
        [HttpGet]
        [Route("/api/playlist/{playlistName}/songs")]
        [ValidateModelState]
        [SwaggerOperation("ApiPlaylistPlaylistNameSongsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Song>), description: "List of songs")]
        public virtual IActionResult ApiPlaylistPlaylistNameSongsGet([FromRoute][Required]string playlistName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Song>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"song\" : \"song\",\n  \"playlist\" : [ \"playlist\", \"playlist\" ],\n  \"artist\" : \"artist\",\n  \"album\" : \"album\"\n}, {\n  \"song\" : \"song\",\n  \"playlist\" : [ \"playlist\", \"playlist\" ],\n  \"artist\" : \"artist\",\n  \"album\" : \"album\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Song>>(exampleJson)
                        : default(List<Song>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a new song to a playlist
        /// </summary>
        /// <param name="body"></param>
        /// <param name="playlistName">Name of the playlist</param>
        /// <response code="201">Song added to playlist successfully</response>
        [HttpPost]
        [Route("/api/playlist/{playlistName}/songs")]
        [ValidateModelState]
        [SwaggerOperation("ApiPlaylistPlaylistNameSongsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse2011), description: "Song added to playlist successfully")]
        public virtual IActionResult ApiPlaylistPlaylistNameSongsPost([FromBody]SongInput body, [FromRoute][Required]string playlistName)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(InlineResponse2011));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"Song added to playlist successfully\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2011>(exampleJson)
                        : default(InlineResponse2011);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a song&#x27;s playlists
        /// </summary>
        /// <param name="body"></param>
        /// <param name="playlistName">Name of the playlist</param>
        /// <param name="songName">Name of the song</param>
        /// <response code="200">Song playlists updated successfully</response>
        [HttpPut]
        [Route("/api/playlist/{playlistName}/songs/{songName}")]
        [ValidateModelState]
        [SwaggerOperation("ApiPlaylistPlaylistNameSongsSongNamePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Song playlists updated successfully")]
        public virtual IActionResult ApiPlaylistPlaylistNameSongsSongNamePut([FromBody]PlaylistUpdate body, [FromRoute][Required]string playlistName, [FromRoute][Required]string songName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"Song playlists updated successfully\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
                        : default(InlineResponse2002);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
